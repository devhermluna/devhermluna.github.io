{"version":3,"sources":["constants/MENU.js","pages/Home.js","serviceWorker.js","index.js","router/index.js"],"names":["MENU","path","name","component","react_default","a","createElement","react","src","className","alt","map","_ref","key","uuidv4","Link","to","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","BrowserRouter","rest","Object","objectWithoutProperties","Route","assign","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.41aebb2d.chunk.js","sourcesContent":["import React from 'react';\nimport Home from '../pages/Home';\n\nexport default [\n  {\n    path: '/',\n    name: 'Home',\n    component: Home,\n    exact: true\n  },\n  {\n    path: '/about',\n    name: 'About Me',\n    component: () => (\n      <h1>About</h1>\n    )\n  },\n  {\n    path: '/skills',\n    name: 'Skills',\n    component: () => (\n      <h1>Skills</h1>\n    )\n  },\n  {\n    path: '/portfolio',\n    name: 'Portfolio',\n    component: () => (\n      <h1>Portfolio</h1>\n    )\n  },\n  {\n    path: '/work-experience',\n    name: 'Work Experience',\n    component: () => (\n      <h1>Work experience</h1>\n    )\n  },\n  {\n    path: '/blog',\n    name: 'Blog',\n    component: () => (\n      <h1>Blog</h1>\n    )\n  }\n];\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport uuidv4 from 'uuid/v4';\nimport MENU from '../constants/MENU';\nimport '../sass/app.sass';\nimport '../sass/header.sass';\n\nconst App = () => (\n  <Fragment>\n    <img src=\"/images/design.jpg\" className=\"app-design\" alt=\"logo\" />\n\n    <header className=\"header\">\n      <div className=\"header-top-bar\">\n        <div className=\"site-logo\" />\n        <nav className=\"navigation-menu\">\n          <ul>\n            {\n              MENU.map(({\n                path,\n                name\n              }) => (\n                <li key={uuidv4()}>\n                  <Link to={path}>{name}</Link>\n                </li>\n              ))\n            }\n          </ul>\n        </nav>\n      </div>\n      <div className=\"position-titles\">\n        <p>Senior Frontend Developer</p>\n        <p>UI/UX Developer</p>\n      </div>\n    </header>\n  </Fragment>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './router';\nimport * as serviceWorker from './serviceWorker';\nimport './sass/reset.sass';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React, { Fragment } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport uuidv4 from 'uuid/v4';\nimport MENU from '../constants/MENU';\n\nexport default () => (\n  <Router>\n    <Fragment>\n      {\n        MENU.map(({\n          path,\n          component,\n          ...rest\n        }) => (\n          <Route\n            {...rest}\n            key={uuidv4()}\n            path={path}\n            component={component}\n          />\n        ))\n      }\n    </Fragment>\n  </Router>\n);\n"],"sourceRoot":""}